/*

Notes on this job:
 - it will use an Artifactory to cache docker images an avoid building and building them from scratch
 - (because of the previous issue) several instances of this job cannot run in paralel (they might override the `latest` image uploaded)

*/


// Maybe parameterized somewhere
dockerUsername = 'center-c3i-docker.jfrog.io'
dockerhubUsername = 'conanio'


def parseVersion(String version) {
    def matcher = (version =~ /(\d+).(\d+).(\d+)(\w{1}\d+)?/)
    return [matcher[0][1] as String, matcher[0][2] as String, matcher[0][3] as String]
}

String getVersionMajor(String version) {
    def (major, _1, _2) = parseVersion(version)
    return major
}


def buildImage(String latestMaster, String latestBranch, String expectedImage, String buildArgs, String target = null, String extraCacheFrom = null) {
    withCredentials([usernamePassword(credentialsId: 'center-c3i-docker', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
        sh 'docker login --username $USERNAME --password $PASSWORD ' + "${dockerUsername}"
    }

    String cacheFrom = extraCacheFrom ? " --cache-from ${extraCacheFrom}" : ''
    if (0 == sh(script: "docker pull ${latestMaster}", returnStatus: true)) {
        cacheFrom = "${cacheFrom} --cache-from ${latestMaster}"
    }
    if (0 == sh(script: "docker pull ${latestBranch}", returnStatus: true)) {
        cacheFrom = "${cacheFrom} --cache-from ${latestBranch}"
    }

    sh "docker build ${cacheFrom} -t ${expectedImage} ${buildArgs} ${target ? "--target $target": ''} ."

    sh "docker push ${expectedImage}"
    sh "docker tag ${expectedImage} ${latestBranch}"
    sh "docker push ${latestBranch}"
}


def get_container_id() {
    // This is quite fragile and might depends on the Jenkins configuration and deployment, but it is the best
    //  I can figure out to get the ID of the running container to be able to mount the same volume when
    //  using docker-in-docker.
    String nodeName = "${NODE_NAME}"
    String output = sh(script: 'docker ps --no-trunc', returnStdout: true)
    String nodeId = null
    output.split('\n').each({
        String line = it.trim()
        if (line.contains(nodeName) && line.contains('/opt/entrypoint.sh')) {
            nodeId = line.split(' ')[0]
        }
    })
    echo "Node ${nodeName} with docker ID '${nodeId}'"
    return nodeId
}

def checkoutSources() {
    if (params.scm_pr_number) {
        echo "Install reference from SCM repository. PR ${params.scm_pr_number} merging with 'master' branch"
        // TODO: Try using extension 'PreBuildMerge' (https://gist.github.com/martinda/b2ece95c2c71ddb4d4a762f0a02561b3)
        checkout([$class           : 'GitSCM',
                    branches         : [[name: params.scm_pr_commit]],
                    userRemoteConfigs: [[name         : 'origin', refspec: "+refs/pull/${params.scm_pr_number}/head:refs/remotes/origin/PR-${params.scm_pr_number} +refs/heads/master:refs/remotes/origin/master",
                                        credentialsId: 'GITHUB_CLONE', url: params.scm_repository]],
        ])
        sh 'git config user.email "any@notused.com"'
        sh 'git config user.name "CI bot"'
        sh "git merge --no-ff ${params.scm_commit}"
    }
    else {
        echo "Install reference from the SCM repository"
        checkout([$class           : 'GitSCM',
                    branches         : [[name: params.scm_commit]],
                    userRemoteConfigs: [[credentialsId: 'GITHUB_CLONE', url: params.scm_repository]],
        ])
    }
    sh 'git log -n 10 --graph --pretty=oneline --abbrev-commit --all --decorate=full'
}

node('Linux') {
    List<String> gccVersions = params.gcc_versions.split("\n")
    List<String> clangVersions = params.clang_versions.split("\n")


    stage('Input parameters') {
        echo """
        About sources:
        - scm_repository: ${params.scm_repository}
        - scm_commit: ${params.scm_commit}
        - scm_base_branch: ${params.scm_base_branch}
        - scm_pr_number: ${params.scm_pr_number}
        - scm_pr_commit: ${params.scm_pr_commit}
        """
        if (params.scm_pr_number) {
            currentBuild.description = "${params.suffix} | PR-${params.scm_pr_number} - ${params.scm_pr_commit.substring(0, Math.min(8, params.scm_pr_commit.size()))}"
        }
        else {
            currentBuild.description = "${params.suffix} | ${params.scm_base_branch} - ${params.scm_commit.substring(0, Math.min(8, params.scm_commit.size()))}"
        }
        // TODO: currentBuild.description = "${}"

        echo """
        About base docker:
        - distro: ${params.distro}
        - distro_version: ${params.distro_version}
        """

        echo """
        About tools installed:
        - conan_version: ${params.conan_version}
        - cmake_version: ${params.cmake_version}
        - python_version: ${params.python_version}
        - jenkins_agent_version: ${params.jenkins_agent_version}
        - jenkins_agent_new_version: ${params.jenkins_agent_new_version}
        - java_jdk_version: ${params.java_jdk_version}
        - java_jdk_new_version: ${params.java_jdk_new_version}
        """

        echo """
        Images to generate:
        - gcc_versions: ${gccVersions.join(', ')}
        - clang_versions: ${clangVersions.join(', ')}
        - libstdcpp_version: ${params.libstdcpp_version}
        - libstdcpp_patch_version: ${params.libstdcpp_patch_version}
        - libstdcpp_major_version: ${params.libstdcpp_major_version}
        """
        assert gccVersions.size() > 0: "Expecting to build some GCC versions at least"
        assert clangVersions.size() > 0: "Expecting to build some Clang versions at least"

        echo """
        About docker images generated:
        - suffix: ${params.suffix}
        - dockerUsername: ${dockerUsername}
        - dockerhubUsername: ${dockerhubUsername}
        """

        echo """
        Workflow control
        - upload_latest: ${params.upload_latest}
        - upload_main_images: ${params.upload_main_images}
        - upload_jenkins_images: ${params.upload_jenkins_images}
        - dry_run: ${params.dry_run}
        """
    }

    stage('Checkout sources') {
        checkoutSources()
    }

    stage('Install deps') {
        sh 'pip install pytest'
    }

    // Get some global information, used later
    String suffix = params.suffix ? "-${params.suffix}" : ''
    String mainContainerID = get_container_id()
    String targetBranch = params.scm_base_branch.replaceAll('/', '-')
    String branchName = targetBranch
    if (params.scm_pr_number) {
        branchName = "PR-${params.scm_pr_number}"
    }

    boolean isMaster = (branchName == 'master')
    echo ">> branchName: ${branchName}, targetBranch: ${targetBranch} (isMaster: ${isMaster})"
    String commit = "n${env.BUILD_NUMBER}" // We need something unique for this execution, the commit is not enough (we can trigger again same commit)

    // Build build-args list
    Map<String, String> buildArguments = [:]
    Map<String, String> testArguments = [:]
    stage("Build arguments") {
        buildArguments.put('CONAN_VERSION', params.conan_version)
        buildArguments.put('CMAKE_VERSION_FULL', params.cmake_version)
        def (major, minor, _) = parseVersion(params.cmake_version)
        buildArguments.put('CMAKE_VERSION', "$major.$minor")
        buildArguments.put('PYTHON_VERSION', params.python_version)
        buildArguments.put('LIBSTDCPP_VERSION', params.libstdcpp_version)
        buildArguments.put('LIBSTDCPP_PATCH_VERSION', params.libstdcpp_patch_version)
        buildArguments.put('LIBSTDCPP_MAJOR_VERSION', params.libstdcpp_major_version)
        buildArguments.put('DOCKER_USERNAME', dockerUsername)
        buildArguments.put('JENKINS_AGENT_VERSION', params.jenkins_agent_version)
        buildArguments.put('JENKINS_AGENT_NEW_VERSION', params.jenkins_agent_new_version)
        buildArguments.put('JAVA_JDK_VERSION', params.java_jdk_version)
        buildArguments.put('JAVA_JDK_NEW_VERSION', params.java_jdk_new_version)
        buildArguments.put('DISTRO', params.distro)
        buildArguments.put('DISTRO_VERSION', params.distro_version)

        buildArguments.put('DOCKER_TAG', "${branchName}-${commit}")

        testArguments = buildArguments
        gccVersions.each { v ->
            String gccVersionMajor = getVersionMajor(v)
            testArguments.put("GCC${gccVersionMajor}_VERSION", v)
        }
        clangVersions.each { v ->
            String clangVersionMajor = getVersionMajor(v)
            testArguments.put("CLANG${clangVersionMajor}_VERSION", v)
        }

        // TODO: Pass expected in a different way
        writeFile(file: 'modern/.env', text: testArguments.collect({ k, v -> "${k }=${v }"}).join('\n') as String)
        sh 'cat modern/.env'
    }
    String buildArgs = buildArguments.collect({ k, v -> "--build-arg ${k }=${v }"}).join(' ') as String

    stage('Xenial - Build base image') {
        String expectedImage = "${dockerUsername}/base-${params.distro}${suffix}:${branchName}-${commit}"
        String latestBranch = "${dockerUsername}/base-${params.distro}${suffix}:${branchName}-latest"
        String latestMaster = "${dockerUsername}/base-${params.distro}${suffix}:${targetBranch}-latest"
        dir('modern/base') {
            buildImage(latestMaster, latestBranch, expectedImage, buildArgs)
        }

        dir('modern') {
            sh "pytest tests --image ${expectedImage} --service base -vv --volumes-from ${mainContainerID} --user 0:0"
        }
    }

    // Define helper function to build the compiler
    Closure compilerBuild = { String compiler, String version ->
        return {
            String versionMajor = getVersionMajor(version)

            String builderImage = "${dockerUsername}/${compiler}${versionMajor}-${params.distro}${suffix}-builder:${branchName}-${commit}"
            String deployImage = "${dockerUsername}/${compiler}${versionMajor}-${params.distro}${suffix}:${branchName}-${commit}"
            String jenkinsImage = "${dockerUsername}/${compiler}${versionMajor}-${params.distro}${suffix}-jenkins:${branchName}-${commit}"
            String jenkinsNewImage = "${dockerUsername}/${compiler}${versionMajor}-${params.distro}${suffix}-jenkins:${branchName}-${commit}-${params.jenkins_agent_new_version}"
            String compilerArgs = "${buildArgs} --build-arg ${compiler.toUpperCase()}_VERSION=${version}"
            if (suffix) {
                compilerArgs = "${compilerArgs} --build-arg SUFFIX=${suffix}"
            }

            node('Linux') {
                stage('Checkout and install deps') {
                    checkoutSources()
                    sh 'pip install pytest'
                    // TODO: Pass expected in a different way
                    writeFile(file: 'modern/.env', text: testArguments.collect({ k, v -> "${k }=${v }"}).join('\n') as String)
                    sh 'cat modern/.env'
                }

                String containerID = get_container_id()

                stage("${compiler.toUpperCase()} ${version} builder") {
                    String latestBranch = "${dockerUsername}/${compiler}${versionMajor}-${params.distro}${suffix}-builder:${branchName}-latest"
                    String latestMaster = "${dockerUsername}/${compiler}${versionMajor}-${params.distro}${suffix}-builder:${targetBranch}-latest"

                    dir("modern/${compiler}") {
                        buildImage(latestMaster, latestBranch, builderImage, compilerArgs, 'builder')
                    }
                }

                stage("${compiler.toUpperCase()} ${version} deploy") {
                    String latestBranch = "${dockerUsername}/${compiler}${versionMajor}-${params.distro}${suffix}:${branchName}-latest"
                    String latestMaster = "${dockerUsername}/${compiler}${versionMajor}-${params.distro}${suffix}:${targetBranch}-latest"

                    dir("modern/${compiler}") {
                        buildImage(latestMaster, latestBranch, deployImage, compilerArgs, 'deploy', builderImage)
                    }

                    dir('modern') {
                        sh "pytest tests --image ${deployImage} --service deploy -vv --volumes-from ${containerID} --user 0:0"
                    }
                }

                stage("${compiler.toUpperCase()} ${version} jenkins") {
                    String latestBranch = "${dockerUsername}/${compiler}${versionMajor}-${params.distro}${suffix}-jenkins:${branchName}-latest"
                    String latestMaster = "${dockerUsername}/${compiler}${versionMajor}-${params.distro}${suffix}-jenkins:${targetBranch}-latest"

                    dir('modern/jenkins') {
                        buildImage(latestMaster, latestBranch, jenkinsImage, "${compilerArgs} --build-arg SOURCE_CONANIO_IMAGE=${deployImage}")
                    }

                    dir('modern') {
                        sh "pytest tests --image ${jenkinsImage} --service jenkins -vv --volumes-from ${containerID} --user 0:0"
                    }
                }

                stage("${compiler.toUpperCase()} ${version} jenkins new") {
                    String latestNewBranch = "${dockerUsername}/${compiler}${versionMajor}-${params.distro}${suffix}-jenkins:${branchName}-latest-${params.jenkins_agent_new_version}"
                    String latestNewMaster = "${dockerUsername}/${compiler}${versionMajor}-${params.distro}${suffix}-jenkins:${targetBranch}-latest-${params.jenkins_agent_new_version}"

                    dir('modern/jenkins') {
                        buildImage(latestNewMaster, latestNewBranch, jenkinsNewImage, "${compilerArgs} --build-arg SOURCE_CONANIO_IMAGE=${deployImage} --build-arg JENKINS_AGENT_VERSION=${params.jenkins_agent_new_version} --build-arg JAVA_JDK_VERSION=${params.java_jdk_new_version}")
                    }

                    dir('modern') {
                        sh "pytest tests --image ${jenkinsNewImage} --service jenkins -vv --volumes-from ${containerID} --user 0:0"
                    }
                }
            }
        }
    }

    // Build GCC in parallel
    Map gccBuilds = [:]
    List<String> gccImages = []
    gccVersions.each { v ->
        String gccVersion = v
        String gccVersionMajor = getVersionMajor(gccVersion)
        gccImages.add("gcc${gccVersionMajor}-${params.distro}${suffix}")
        gccBuilds["GCC ${gccVersionMajor}"] = compilerBuild('gcc', gccVersion)
    }
    gccBuilds.failFast = true
    parallel(gccBuilds)


    // Build Clang in parallel
    Map clangBuilds = [:]
    List<String> clangImages = []
    clangVersions.each { v ->
        String clangVersion = v
        String clangVersionMajor = getVersionMajor(clangVersion)
        clangImages.add("clang${clangVersionMajor}-${params.distro}${suffix}")
        clangBuilds["Clang ${clangVersionMajor}"] = compilerBuild('clang', clangVersion)
    }
    clangBuilds.failFast = true
    parallel(clangBuilds)


    // Run the xtests. Do it in the same node to take advantage of the cache
    stage('Run GCC xtests') {
        echo 'Run tests that check binaries work in compatible images'
        gccImages.each { image ->
            dir('modern') {
                sh "pytest tests --image ${dockerUsername}/${image}:${branchName}-${commit} --service xtest -vv --volumes-from ${mainContainerID} --user 0:0"
            }
        }
    }
    stage('Run Clang xtests') {
        echo 'Run tests that check binaries work in compatible images'
        clangImages.each { image ->
            dir('modern') {
                sh "pytest tests --image ${dockerUsername}/${image}:${branchName}-${commit} --service xtest -vv --volumes-from ${mainContainerID} --user 0:0"
            }
        }
    }

    if (isMaster) {
        // If it was master and everything is ok up to here
        stage('Upload images') {
            List images = ["base-${params.distro}${suffix}"]
            gccVersions.each { v ->
                String versionMajor = getVersionMajor(v)
                if (params.upload_main_images) {
                    images.add("gcc${versionMajor}-${params.distro}${suffix}")
                }
                if (params.upload_jenkins_images) {
                    images.add("gcc${versionMajor}-${params.distro}${suffix}-jenkins")
                }
            }
            clangVersions.each { v ->
                String versionMajor = getVersionMajor(v)
                if (params.upload_main_images) {
                    images.add("clang${versionMajor}-${params.distro}${suffix}")
                }
                if (params.upload_jenkins_images) {
                    images.add("clang${versionMajor}-${params.distro}${suffix}-jenkins")
                }
            }

            images.each { image ->
                String builtImage = "${dockerUsername}/${image}:${branchName}-${commit}"
                sh "docker pull ${builtImage}"

                withCredentials([usernamePassword(credentialsId: 'docker-credentials', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh 'docker login --username $USERNAME --password $PASSWORD'
                }

                String tagVersion = params.conan_version
                // Upload with the corresponding tag version
                String uploadImage = "${dockerhubUsername}/${image}:${tagVersion}"
                sh "docker tag ${builtImage} ${uploadImage}"
                if (!params.dry_run) {
                    sh "docker push ${uploadImage}"
                }

                if (params.upload_latest) {
                    // Upload with tag 'latest'
                    String uploadLatest = "${dockerhubUsername}/${image}:latest"
                    sh "docker tag ${builtImage} ${uploadLatest}"
                    if (!params.dry_run) {
                        sh "docker push ${uploadLatest}"
                    }
                }

                // Upload Jenkins images with new client version
                if (params.upload_jenkins_images && image.endsWith('-jenkins')) {
                    String builtNewImage = "${dockerUsername}/${image}:${branchName}-${commit}-${params.jenkins_agent_new_version}"
                    sh "docker pull ${builtNewImage}"

                    withCredentials([usernamePassword(credentialsId: 'docker-credentials', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                        sh 'docker login --username $USERNAME --password $PASSWORD'
                    }

                    String tagNewVersion = "${params.conan_version}-${params.jenkins_agent_new_version}"
                    // Upload with the corresponding tag version
                    String uploadNewImage = "${dockerhubUsername}/${image}:${tagNewVersion}"
                    sh "docker tag ${builtNewImage} ${uploadNewImage}"
                    if (!params.dry_run) {
                        sh "docker push ${uploadNewImage}"
                    }

                    if (params.upload_latest) {
                        // Upload with tag 'latest'
                        String uploadNewLatest = "${dockerhubUsername}/${image}:latest-${params.jenkins_agent_new_version}"
                        sh "docker tag ${builtNewImage} ${uploadNewLatest}"
                        if (!params.dry_run) {
                            sh "docker push ${uploadNewLatest}"
                        }
                    }
                }
            }
        }
    }
}
