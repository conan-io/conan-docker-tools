
// Maybe parameterized somewhere
dockerUsername = 'center-c3i-docker.jfrog.io'


String getVersionMajor(String version) {
    def matcher = (version =~ /(\d+).(\d+).(\d+)/)
    return matcher[0][1] as String
}

def buildImage(String latestMaster, String latestBranch, String expectedImage, String buildArgs, String target = null, String extraCacheFrom = null) {
    withCredentials([usernamePassword(credentialsId: 'center-c3i-docker', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
        sh 'docker login --username $USERNAME --password $PASSWORD ' + "${dockerUsername}"
    }

    String cacheFrom = extraCacheFrom ? " --cache-from ${extraCacheFrom}" : ''
    if (0 == sh(script: "docker pull ${latestMaster}", returnStatus: true)) {
        cacheFrom = "${cacheFrom} --cache-from ${latestMaster}"
    }
    if (0 == sh(script: "docker pull ${latestBranch}", returnStatus: true)) {
        cacheFrom = "${cacheFrom} --cache-from ${latestBranch}"
    }

    sh "docker build ${cacheFrom} -t ${expectedImage} ${buildArgs} ${target ? "--target $target": ''} ."

    sh "docker push ${expectedImage}"
    sh "docker tag ${expectedImage} ${latestBranch}"
    sh "docker push ${latestBranch}"
}


def get_container_id() {
    // This is quite fragile and might depends on the Jenkins configuration and deployment, but it is the best
    //  I can figure out to get the ID of the running container to be able to mount the same volume when
    //  using docker-in-docker.
    String nodeName = "${NODE_NAME}"
    String output = sh(script: 'docker ps --no-trunc', returnStdout: true)
    String nodeId = null
    output.split('\n').each({
        String line = it.trim()
        if (line.contains(nodeName) && line.contains('/opt/entrypoint.sh')) {
            nodeId = line.split(' ')[0]
        }
    })
    echo "Node ${nodeName} with docker ID '${nodeId}'"
    return nodeId
}


node('Linux') {
    // Checkout and install deps
    checkout scm
    sh 'pip install pytest'
    String mainContainerID = get_container_id()

    String branchName = scm.branches[0].name.replaceAll('/', '-')
    String targetBranch = 'master'  // Implicit knowledge of the underlying repository
    if (env.BRANCH_NAME.startsWith('PR')) {  // Because it is Github
        targetBranch = "${env.CHANGE_TARGET}".replaceAll('/', '-')
    }
    boolean isMaster = (branchName == 'master')
    echo ">> branchName: ${branchName}, targetBranch: ${targetBranch} (isMaster: ${isMaster})"
    String commit = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()

    Map originalEnvironment = [:]
    Map job_environment = [:]
    String distro = null
    List<String> gccVersions = []
    List<String> clangVersions = []
    String conanVersion = null
    String originalUsername = null
    stage('Parse environment file') {
        String content = readFile('modern/.env')
        content.split('\n').each({ it.trim() }).findAll({ it.size() && !it.startsWith('#') }).each {
            def (name, value) = it.split('=')
            originalEnvironment.put(name, value)
            job_environment.put(name, value)

            if (name =~ /GCC\d+_VERSION/) {
                gccVersions.add(value)
            }
            if (name =~ /CLANG\d+_VERSION/) {
                clangVersions.add(value)
            }
        }
        echo "originalEnvironment:\n\n${ originalEnvironment.collect({ k, v -> "${k }=${v }"}).join('\n')}"

        // Environment to use in this job:
        job_environment['DOCKER_USERNAME'] = dockerUsername
        job_environment['DOCKER_TAG'] = "${branchName}-${commit}"
        echo "job_environment:\n\n${ job_environment.collect({ k, v -> "${k }=${v }"}).join('\n')}"

        // Parse more information
        distro = job_environment['DISTRO']
        conanVersion = job_environment['CONAN_VERSION']
        originalUsername = originalEnvironment['DOCKER_USERNAME']

        echo "gccVersions: ${gccVersions.join(', ')}"
        echo "clangVersions: ${clangVersions.join(', ')}"
        assert gccVersions.size() > 0: "Expecting to build some GCC versions at least"
        assert clangVersions.size() > 0: "Expecting to build some Clang versions at least"
    }
    String buildArgs = job_environment.collect({ k, v -> "--build-arg ${k }=${v }"}).join(' ') as String

    stage('Xenial - Build base image') {
        String expectedImage = "${dockerUsername}/base-${distro}:${branchName}-${commit}"
        String latestBranch = "${dockerUsername}/base-${distro}:${branchName}-latest"
        String latestMaster = "${dockerUsername}/base-${distro}:${targetBranch}-latest"
        dir('modern/base') {
            buildImage(latestMaster, latestBranch, expectedImage, buildArgs)
        }

        dir('modern') {
            sh "pytest tests --image ${expectedImage} --service base -vv --volumes-from ${mainContainerID} --user 0:0"
        }
    }

    // Define helper function to build the compiler
    Closure compilerBuild = { String compiler, String version ->
        return {
            String versionMajor = getVersionMajor(version)

            String builderImage = "${dockerUsername}/${compiler}${versionMajor}-${distro}-builder:${branchName}-${commit}"
            String deployImage = "${dockerUsername}/${compiler}${versionMajor}-${distro}:${branchName}-${commit}"
            String jenkinsImage = "${dockerUsername}/${compiler}${versionMajor}-${distro}-jenkins:${branchName}-${commit}"
            String compilerArgs = "${buildArgs} --build-arg ${compiler.toUpperCase()}_VERSION=${version}"

            node('Linux') {
                // Checkout and install deps
                checkout scm
                sh 'pip install pytest'
                String containerID = get_container_id()

                stage("${compiler.toUpperCase()} ${version} builder") {
                    String latestBranch = "${dockerUsername}/${compiler}${versionMajor}-${distro}-builder:${branchName}-latest"
                    String latestMaster = "${dockerUsername}/${compiler}${versionMajor}-${distro}-builder:${targetBranch}-latest"

                    dir("modern/${compiler}") {
                        buildImage(latestMaster, latestBranch, builderImage, compilerArgs, 'builder')
                    }
                }

                stage("${compiler.toUpperCase()} ${version} deploy") {
                    String latestBranch = "${dockerUsername}/${compiler}${versionMajor}-${distro}:${branchName}-latest"
                    String latestMaster = "${dockerUsername}/${compiler}${versionMajor}-${distro}:${targetBranch}-latest"

                    dir("modern/${compiler}") {
                        buildImage(latestMaster, latestBranch, deployImage, compilerArgs, 'deploy', builderImage)
                    }

                    dir('modern') {
                        sh "pytest tests --image ${deployImage} --service deploy -vv --volumes-from ${containerID} --user 0:0"
                    }
                }

                stage("${compiler.toUpperCase()} ${version} jenkins") {
                    String latestBranch = "${dockerUsername}/${compiler}${versionMajor}-${distro}-jenkins:${branchName}-latest"
                    String latestMaster = "${dockerUsername}/${compiler}${versionMajor}-${distro}-jenkins:${targetBranch}-latest"

                    dir('modern/jenkins') {
                        buildImage(latestMaster, latestBranch, jenkinsImage, "${compilerArgs} --build-arg SOURCE_CONANIO_IMAGE=${deployImage}")
                    }

                    dir('modern') {
                        sh "pytest tests --image ${jenkinsImage} --service jenkins -vv --volumes-from ${containerID} --user 0:0"
                    }
                }
            }
        }
    }

    // Build GCC in parallel
    Map gccBuilds = [:]
    List<String> gccImages = []
    gccVersions.each { v ->
        String gccVersion = v
        String gccVersionMajor = getVersionMajor(gccVersion)
        gccImages.add("gcc${gccVersionMajor}-${distro}")
        gccBuilds["GCC ${gccVersionMajor}"] = compilerBuild('gcc', gccVersion)
    }
    gccBuilds.failFast = true
    parallel(gccBuilds)


    // Build Clang in parallel
    Map clangBuilds = [:]
    List<String> clangImages = []
    clangVersions.each { v ->
        String clangVersion = v
        String clangVersionMajor = getVersionMajor(clangVersion)
        clangImages.add("clang${clangVersionMajor}-${distro}")
        clangBuilds["Clang ${clangVersionMajor}"] = compilerBuild('clang', clangVersion)
    }
    clangBuilds.failFast = true
    parallel(clangBuilds)


    // Run the xtests. Do it in the same node to take advantage of the cache
    stage('Run GCC xtests') {
        echo 'Run tests that check binaries work in compatible images'
        gccImages.each { image ->
            dir('modern') {
                sh "pytest tests --image ${dockerUsername}/${image}:${branchName}-${commit} --service xtest -vv --volumes-from ${mainContainerID} --user 0:0"
            }
        }
    }
    stage('Run Clang xtests') {
        echo 'Run tests that check binaries work in compatible images'
        clangImages.each { image ->
            dir('modern') {
                sh "pytest tests --image ${dockerUsername}/${image}:${branchName}-${commit} --service xtest -vv --volumes-from ${mainContainerID} --user 0:0"
            }
        }
    }


    if (isMaster) {
        // If it was master and everything is ok up to here
        stage('Upload images') {
            List images = ["base-${distro}"]
            gccVersions.each { v ->
                String versionMajor = getVersionMajor(v)
                images.add("gcc${versionMajor}-${distro}")
                images.add("gcc${versionMajor}-${distro}-jenkins")
            }
            clangVersions.each { v ->
                String versionMajor = getVersionMajor(v)
                images.add("clang${versionMajor}-${distro}")
                images.add("clang${versionMajor}-${distro}-jenkins")
            }

            images.each { image ->
                String builtImage = "${dockerUsername}/${image}:${branchName}-${commit}"
                sh "docker pull ${builtImage}"

                withCredentials([usernamePassword(credentialsId: 'docker-credentials', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh 'docker login --username $USERNAME --password $PASSWORD'
                }

                // Upload with the corresponding tag version
                String uploadImage = "${originalUsername}/${image}:${conanVersion}"
                sh "docker tag ${builtImage} ${uploadImage}"
                sh "docker push ${uploadImage}"

                // Upload with tag 'latest'
                String uploadLatest = "${originalUsername}/${image}:latest"
                sh "docker tag ${builtImage} ${uploadLatest}"
                sh "docker push ${uploadLatest}"
            }
        }
    }

}
