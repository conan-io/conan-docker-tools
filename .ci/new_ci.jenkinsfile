
def detectPullRequestMerged() {
    stage("Detect Pull Request merged") {
        String prNumber = ""
        def commitMessage = sh(returnStdout: true, script: 'git show -s --format=%s').trim()
        // WARN: This is very, very fragile... if someone changes the message, if it contains # at some point...
        def regex = /(.*?)#(\d+)(.*)/
        def findPR = (commitMessage =~ /$regex/)
        if (findPR.size() != 1) {
            return null
        }
        return findPR[0][2]
    }
}

def readEnvValues(String envFile) {
    Map<String, String> envContent = [:]
    String content = readFile(envFile)  // legacy/.env or modern/.env
    echo content
    content.split('\n').each({ it.trim() }).findAll({ it.size() && !it.startsWith('#') }).each {
        def (name, value) = it.split('=')
        echo "${name},${value}"
        envContent[name] = value
    }
    return envContent
}

def parseVersion(String version) {
    def matcher = (version =~ /(\d+).(\d+).(\d+)(\w{1}\d+)?/)
    return [matcher[0][1] as String, matcher[0][2] as String, matcher[0][3] as String]
}

String getVersionMajor(String version) {
    def (major, _1, _2) = parseVersion(version)
    return major
}

def buildLegacyImage(Map image, String buildArgs, String registry, String registryCredentialsID) {
    withCredentials([usernamePassword(credentialsId: registryCredentialsID, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
        sh 'docker login --username $USERNAME --password $PASSWORD ' + "${registry}"
        sh 'docker pull docker.io/library/ubuntu:xenial'
        sh 'docker pull docker.io/library/ubuntu:bionic'
        sh 'docker pull docker.io/library/ubuntu:eoan'
    }

    // TODO: Add --cache-from value to speed-up the build

    sh "docker build -t ${image["name"]} ${buildArgs} ."
}

def uploadImage(Map image, String registry, String crendentialsID) {
    withCredentials([usernamePassword(credentialsId: crendentialsID, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
        sh 'docker login --username $USERNAME --password $PASSWORD ' + "${registry}"
    }

    // Upload with the corresponding tag version
    String uploadImage = "${registry}/${image["name"]}"
    sh "docker tag ${image["name"]} ${uploadImage}"
    sh "docker push ${uploadImage}"
}

def getLegacyImages(String pr_number, String registry) {
    Map<String, String> envValues = [:]
    stage('Legacy - Parse environment file') {
        envValues = readEnvValues("legacy/.env")
    }

    List<Map> images = []
    stage('Legacy - Generate build matrix') {
        List<String> gccVersions = envValues["GCC_LEGACY_VERSIONS"].split(",")
        List<String> clangVersions = envValues["CLANG_LEGACY_VERSIONS"] != null ? envValues["CLANG_LEGACY_VERSIONS"].split(",") : []
        List<String> conanVersions = [envValues["CONAN_VERSION"]]
        List<String> jenkinsAgentVersions = envValues["JENKINS_AGENT_VERSION"].split(",")
        String dockerUsername = envValues["DOCKER_USERNAME"]

        // <registry>/    <docker_username>/<compiler><majorVersion>(-jenkins):<conan_version>(-<jenkins_agent_version>)
        List<String> compilerImages = []
        gccVersions.each({ String gccVersion ->
            String image = "${dockerUsername}/gcc${gccVersion}"
            compilerImages.add(image)
        })

        clangVersions.each({ String clangVersion ->
            String image = "${dockerUsername}/clang${clangVersion}"
            compilerImages.add(image)
        })

        List<String> conanImages = []
        conanVersions.each({ String conanVersion ->
            compilerImages.each({ String compilerImage ->
                conanImages.add("${compilerImage}:${conanVersion}")
            })
        })

        List<String> allImages = conanImages.collect()
        conanImages.each({String conanImage ->
            def (name, conanVersion) = conanImage.split(':')
            jenkinsAgentVersions.each({String jenkinsAgentVersion ->
                allImages.add("${name}-jenkins:${conanVersion}-${jenkinsAgentVersion}")
            })
        })

        allImages.each({ String image ->
            Map imageData = ["buildArgs": [:]]
            imageData["name"] = "${image}-#${pr_number}"
            imageData["compiler"] = image.contains("gcc") ? "gcc" : "clang"
            String compilerVersionSubStr = image.split(imageData["compiler"]).last()
            imageData["compilerVersion"] = compilerVersionSubStr.contains("-") ? compilerVersionSubStr.split("-").first() : compilerVersionSubStr.split(":").first()
            imageData["buildArgs"]["CONAN_VERSION"] = image.split(":").last().split("-").first()
            imageData["path"] = "legacy/${imageData["compiler"]}_${imageData["compilerVersion"]}"

            if (image.contains("jenkins")) {
                imageData["buildArgs"]["SOURCE_CONANIO_IMAGE"] = "${registry}/${image.split("-").first()}:${imageData["buildArgs"]["CONAN_VERSION"]}-#${pr_number}"
                imageData["buildArgs"]["AGENT_VERSION"] = image.split(":").last().split("-")[1]
                imageData["buildArgs"]["JAVA_JDK_VERSION"] = envValues["JAVA_JDK_VERSION"]
                imageData["path"] = "legacy/jenkins"
            }
            echo "${imageData}"
            images.add(imageData)
        })
    }
    return images
}

def getModernImages(String pr_number, String registry) {
    Map<String, String> envValues = [:]
    stage('Modern - Parse environment file') {
        envValues = readEnvValues("modern/.env")
    }

    List<Map> images = []
    stage('Modern - Generate build matrix') {
        List<String> gccVersions = envValues["GCC_VERSIONS"].split(",").collect({String version -> return getVersionMajor(version)})
        List<String> clangVersions = envValues["CLANG_VERSIONS"].split(",").collect({String version -> return getVersionMajor(version)})
        List<String> conanVersions = [envValues["CONAN_VERSION"]]
        List<String> jenkinsAgentVersions = envValues["JENKINS_AGENT_VERSION"].split(",")
        String cmakeVersion = envValues["CMAKE_VERSION_FULL"]
        String pythonVersion = envValues["PYTHON_VERSION"]
        String dockerUsername = envValues["DOCKER_USERNAME"]
        String dockerhubUsername = envValues["DOCKERHUB_USERNAME"]
        String distro = envValues["DISTRO"]
        String distroVersion = envValues["DISTRO_VERSION"]
        String libstdcppVersion = envValues["LIBSTDCPP_VERSION"]
        String libstdcppPatchVersion = envValues["LIBSTDCPP_PATCH_VERSION"]
        String libstdcppMajorVersion = envValues["LIBSTDCPP_MAJOR_VERSION"]

        List<String> allImages = []

        conanVersions.each({ String conanVersion ->
            allImages.add("${dockerUsername}/base-${distro}:${conanVersion}")
        })

        List<String> compilerImages = []
        gccVersions.each({ String gccVersion ->
            String image = "${dockerUsername}/gcc${gccVersion}-${distro}"
            compilerImages.add(image)
        })

        clangVersions.each({ String clangVersion ->
            String image = "${dockerUsername}/clang${clangVersion}-${distro}"
            compilerImages.add(image)
        })

        List<String> conanImages = []
        conanVersions.each({ String conanVersion ->
            compilerImages.each({ String compilerImage ->
                conanImages.add("${compilerImage}:${conanVersion}")
            })
        })

        allImages.addAll(conanImages.collect())
        conanImages.each({String conanImage ->
            def (name, conanVersion) = conanImage.split(':')
            allImages.add("${name}-builder:${conanVersion}")

            jenkinsAgentVersions.each({String jenkinsAgentVersion ->
                allImages.add("${name}-jenkins:${conanVersion}-${jenkinsAgentVersion}")
            })
        })
        echo "All images: ${allImages}"

        allImages.each({ String image ->
            Map imageData = ["buildArgs": [:], "target": null]
            imageData["name"] = "${image}-#${pr_number}"
            imageData["compiler"] = image.contains("gcc") ? "gcc" : "clang"  // remove?
            String compilerName = imageData["compiler"].toUpperCase()
            String compilerVersionSubStr = image.split(imageData["compiler"]).last()
            String compilerVersionMajor = compilerVersionSubStr.contains("-") ? compilerVersionSubStr.split("-").first() : compilerVersionSubStr.split(":").first()
            imageData["compilerVersion"] = envValues["${compilerName}${compilerVersionMajor}_VERSION"]
            imageData["buildArgs"]["CMAKE_VERSION_FULL"] = cmakeVersion
            def (major, minor, _) = parseVersion(cmakeVersion)
            imageData["buildArgs"]['CMAKE_VERSION'] = "$major.$minor"
            imageData["buildArgs"]['PYTHON_VERSION'] = pythonVersion
            imageData["buildArgs"]['LIBSTDCPP_VERSION'] = libstdcppVersion
            imageData["buildArgs"]['LIBSTDCPP_PATCH_VERSION'] = libstdcppPatchVersion
            imageData["buildArgs"]['LIBSTDCPP_MAJOR_VERSION'] = libstdcppMajorVersion
            imageData["buildArgs"]['DOCKER_USERNAME'] = "${registry}/${dockerUsername}"  // Use registry name to pull image from the right registry
            imageData["buildArgs"]['DOCKERHUB_USERNAME'] = dockerhubUsername
            imageData["buildArgs"]['DISTRO'] = distro
            imageData["buildArgs"]['DISTRO_VERSION'] = distroVersion
            imageData["buildArgs"]["CONAN_VERSION"] = image.split(":").last().split("-").first()

            if (!image.contains("base")) {
                imageData["buildArgs"]['DOCKER_TAG'] = "${imageData["buildArgs"]["CONAN_VERSION"]}-#${pr_number}"
                imageData["buildArgs"]["${compilerName}_VERSION"] = imageData["compilerVersion"]
                imageData["path"] = "modern/${imageData["compiler"]}"

                if (image.contains("builder")) {
                    imageData["target"] = "builder"
                } else if (!image.contains("builder") && !image.contains("jenkins")) {
                    imageData["target"] = "deploy"
                }

                if (image.contains("jenkins")) {
                    imageData["buildArgs"]["SOURCE_CONANIO_IMAGE"] = "${registry}/${image.split("-").first()}-${image.split("-")[1]}:${imageData["buildArgs"]["CONAN_VERSION"]}-#${pr_number}"
                    imageData["buildArgs"]["AGENT_VERSION"] = image.split(":").last().split("-")[1]
                    imageData["buildArgs"]["JAVA_JDK_VERSION"] = envValues["JAVA_JDK_VERSION"]
                    imageData["path"] = "modern/jenkins"
                }
            }
            else {
                imageData["path"] = "modern/base"
            }
            echo "Image data: ${imageData}"
            images.add(imageData)
        })
    }
    return images
}

def buildLegacyImages(List<Map> images, String registry, String registryCredentialsID) {
    // Define helper function to build the image
    Closure imageBuild = { Map image ->
        return {
            node('Linux') {
                String buildArgsStr = image["buildArgs"].collect({ k, v -> "--build-arg ${k }=${v }" }).join(' ') as String

                environment {
                    DOCKER_BUILDKIT = 0
                    COMPOSE_DOCKER_CLI_BUILD = 0
                }

                stage('Legacy - Checkout sources') {
                    checkout scm
                }

                stage("Legacy - Build image ${image["name"]}") {
                    dir(image["path"]) {
                        buildLegacyImage(image, buildArgsStr, registry, registryCredentialsID)
                    }
                }

                stage("Legacy - Upload image ${image["name"]} to Artifactory") {
                    uploadImage(image, registry, registryCredentialsID)
                }
            }
        }
    }

    // Build images in parallel
    List<Map> normalImages = images.findAll({ Map image -> !image["name"].contains("jenkins") })
    List<Map> jenkinsImages = images.findAll({ Map image -> image["name"].contains("jenkins") })
    buildParallel("Legacy image", normalImages, imageBuild)
    buildParallel("Legacy image jenkins", jenkinsImages, imageBuild)
}

def buildParallel(String stageName, List images, Closure closure) {
    Map builds = [:]
    images.each { Map image ->
        builds["${stageName} ${image['name']}"] = closure(image)
    }
    builds.failFast = true
    parallel(builds)
}

def buildModernImage(Map image, String buildArgs, String target, String registry, String registryCredentialsID) {
    withCredentials([usernamePassword(credentialsId: registryCredentialsID, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
        sh 'docker login --username $USERNAME --password $PASSWORD ' + "${registry}"
    }

    sh "docker build -t ${image["name"]} ${buildArgs} ${target} ."
}

def buildModernImages(List<Map> images, String registry, String registryCredentialsID) {
    // Define helper function to build the compiler
    Closure imageBuild = { Map image ->
        return {
            node('Linux') {
                String buildArgsStr = image["buildArgs"].collect({ k, v -> "--build-arg ${k }=${v }" }).join(' ') as String
                String target = image["target"] != null ? "--target ${image["target"]}" : ""

                environment {
                    DOCKER_BUILDKIT = 0
                    COMPOSE_DOCKER_CLI_BUILD = 0
                }

                stage('Modern - Checkout sources and install deps') {
                    checkout scm
                    // sh 'pip install pytest'
                    // TODO: Pass expected in a different way
                    // writeFile(file: 'modern/.env', text: testArguments.collect({ k, v -> "${k }=${v }"}).join('\n') as String)
                    // sh 'cat modern/.env'
                }

                stage("Modern - Build image ${image["name"]}") {
                    dir(image["path"]) {
                        buildModernImage(image, buildArgsStr, target, registry, registryCredentialsID)
                    }
                }

                stage("Modern - Upload image ${image["name"]} to Artifactory") {
                    uploadImage(image, registry, registryCredentialsID)
                }
            }
        }
    }

    // Build images in parallel
    // base, builder, normal, jenkins
    List<Map> baseImages = images.findAll({ Map image -> image["name"].contains("base") })
    List<Map> builderImages = images.findAll({ Map image -> image["name"].contains("builder") })
    List<Map> normalImages = images.findAll({ Map image -> !image["name"].contains("base") && !image["name"].contains("builder") && !image["name"].contains("jenkins") })
    List<Map> jenkinsImages = images.findAll({ Map image -> image["name"].contains("jenkins") })
    buildParallel("Modern base image", baseImages, imageBuild)
    buildParallel("Modern builder image", builderImages, imageBuild)
    buildParallel("Modern normal image", normalImages, imageBuild)
    buildParallel("Modern image jenkins", jenkinsImages, imageBuild)
}

def promoteImages(List<Map> images, String fromRegistryName, String fromRegistryCredentialsId,
                  String toRegistryName, String toRegistryCredentialsId) {
    withCredentials([usernamePassword(credentialsId: fromRegistryCredentialsId, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
        sh 'docker login --username $USERNAME --password $PASSWORD ' + "${fromRegistryName}"
    }

    images.each { Map image ->
        // Download from registry
        String fromRegistryImage = "${fromRegistryName}/${image["name"]}"
        sh "docker pull ${fromRegistryImage}"
        String imageName = image["name"].replace("${fromRegistryName}/", "")
        image["name"] = imageName
    }

    images.each { Map image ->
       uploadImage(image, toRegistryName, toRegistryCredentialsId)
    }
}

node('Linux') {
    String branch_commit = null
    String merge_commit = null
    String pr_number = null
    String pr_base_branch = null
    boolean isMasterbranch = false

    stage('Get build job information') {
        def scmVars = checkout scm
        merge_commit = scmVars.GIT_COMMIT
        branch_commit = sh(script: 'git rev-parse HEAD', returnStdout: true).trim()
        isMasterbranch = env.BRANCH_NAME.startsWith('master')  // Because it is Github
        if (!isMasterbranch) {  // It is a pull-request
            pr_number = env.BRANCH_NAME.replace('PR-', '')
            pr_base_branch = "${env.CHANGE_TARGET}"
        } else {
            pr_number = detectPullRequestMerged()
        }
        assert pr_number != null, "Could not detect pull request number"

        echo """
            Build job information:
            - branch_commit: ${branch_commit}
            - merge_commit: ${merge_commit}
            - pr_number: ${pr_number}
            - pr_base_branch: ${pr_base_branch}
            """
    }

    // Check for skip build
    String scmTitle = sh(script: 'git log -1 --pretty=%B', returnStdout: true).trim()
    if (scmTitle.contains('[skip ci]') || scmTitle.contains('[ci skip]')) {
        currentBuild.result = 'SUCCESS'  // Keep success, so GitHub shows green status check
        echo 'Aborting: Found [skip ci] on the commit message'
        return  // Outside stage
    }

    List<Map> legacyImages = getLegacyImages(pr_number, "center-c3i-docker.jfrog.io")
    echo "${legacyImages}"
    List<Map> modernImages = getModernImages(pr_number, "center-c3i-docker.jfrog.io")
    echo "${modernImages}"

    if (!isMasterbranch) {
        // Build Legacy Images
        buildLegacyImages(legacyImages, "center-c3i-docker.jfrog.io", "center-c3i-docker")

        // Build Modern Images
        buildModernImages(modernImages, "center-c3i-docker.jfrog.io", "center-c3i-docker")
    }

    if (isMasterbranch) {
        // Tag images as definitive (without pr_number)
        legacyImages = tagImagesWithoutPRNumber(legacyImages, pr_number, "center-c3i-docker.jfrog.io", "center-c3i-docker")
        modernImages = tagImagesWithoutPRNumber(modernImages, pr_number, "center-c3i-docker.jfrog.io", "center-c3i-docker")
        // Promote to dockerhub
        //promoteImages(legacyImages, "center-c3i-docker.jfrog.io", "center-c3i-docker", "docker.io", "docker-credentials")
        //promoteImages(modernImages, "center-c3i-docker.jfrog.io", "center-c3i-docker", "docker.io", "docker-credentials")
        // TODO: Clean images ffrom PR that are in Artifactory
    }
}

def tagImagesWithoutPRNumber(List<Map> images, String pr_number, String registry, String credentialsID) {
    withCredentials([usernamePassword(credentialsId: credentialsID, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
        sh 'docker login --username $USERNAME --password $PASSWORD ' + "${registry}"
    }

    images.each { Map image ->
        // Pull image from desired registry
        String registryImage = "${registry}/${image["name"]}"
        sh "docker pull ${registryImage}"
        // Remove pr_number from image tag
        String imageWithoutPRNumber = image["name"].replace("-#${pr_number}", "")
        echo "Tagging ${image["name"]} as ${imageWithoutPRNumber}"
        // Tag image without pr_number and push it to desired registry
        String registryImageWithoutPRNumber = "${registry}/${imageWithoutPRNumber}"
        sh "docker tag ${registryImage} ${registryImageWithoutPRNumber}"
        try {
            sh "docker push ${registryImageWithoutPRNumber}"
        } catch (Exception e) {
            echo "Docker push failed. Retrying..."
            sh "docker push ${registryImageWithoutPRNumber}"
        }
        // Return the image without pr_number (and without registry)
        image["name"] = imageWithoutPRNumber
    }
    return images
}
