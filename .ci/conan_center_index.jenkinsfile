/*

This pipeline is used to generate docker images for ConanCenter index

*/


@NonCPS
def getMinConanVersion(content) {
    def minVersion = (content =~ /  v1_required: (\d+).(\d+).(\d+)/)
    assert minVersion, 'configs/library_requirements.yml file was changed! Cannot find conanVersion'
    return [minVersion[0][1] as int, minVersion[0][2] as int, minVersion[0][3] as int]
}

def parseVersion(String version) {
    def matcher = (version =~ /(\d+).(\d+).(\d+)/)
    return [matcher[0][1] as int, matcher[0][2] as int, matcher[0][3] as int]
}

def hasPreVersion(String version) {
    return version ==~ /(\d+).(\d+).(\d+)(\w)(\d+)/
}


node('Linux') {

    stage('Input parameters') {
        echo """
        - dry_run: ${params.dry_run}
        - conan_versions: ${params.conan_versions}
        """
    }

    def conanVersions = []
    List<String> ignoreVersions = []
    String latestVersion = null
    stage('Compute Conan versions') {
        if (params.conan_versions) {
            conanVersions = params.conan_versions.trim().split(',')
            // INFO: Check that all versions are valid
            conanVersions.collect{ parseVersion(it) }
            echo "INFO: Skipping Conan versions computation because of input parameter."
            return
        }

        dir('tmp') {
            // Minimum from https://github.com/conan-io/c3i_jenkins/blob/master/resources/org/jfrog/c3i/configs/library_requirements.yml
            echo "INFO: Read lowest version from CCI requirements"
            checkout([$class           : 'GitSCM',
                    branches         : [[name: 'master']],
                    userRemoteConfigs: [[credentialsId: 'conanci-gh-token', url: 'https://github.com/conan-io/c3i_jenkins.git']],
                    extensions       : [[$class           : 'RelativeTargetDirectory',
                                        relativeTargetDir: 'c3i_jenkins']],
            ])
            def content = readFile "${env.WORKSPACE}/tmp/c3i_jenkins/resources/org/jfrog/c3i/configs/library_requirements.yml"
            def minVersion = getMinConanVersion(content)
            echo " - lowest: $minVersion"

            // Up to latest version in pypi
            echo "Read latest version from pypi"
            def response = httpRequest(url: 'https://pypi.org/pypi/conan/json')
            Map<String, Object> requestJson = readJSON(text: response.content)
            latestVersion = requestJson.info.version
            def keyVersions = requestJson.releases.keySet()

            echo "INFO: Latest version available in pypi: ${latestVersion}"
            echo "INFO: Found versions in pypi: ${keyVersions.size()}"

            for (String release in keyVersions) {
                try {
                    echo "DEBUG: Parsing release '$release'"
                    def version = parseVersion(release)

                    // Ignore Conan < 1.44: https://github.com/conan-io/conan/issues/10611
                    if ((version[0] < 1) || (version[0] == 1 && version[1] < 44)) {
                        echo "WARNING: The version '$release' is skipped because of https://github.com/conan-io/conan/issues/10611."
                        continue
                    }

                    // Ignore listed versions
                    if (ignoreVersions.contains(release)) {
                        echo "WARNING: The version '$release' is explicitly ignored."
                        continue
                    }

                    if (version[0] > minVersion[0] && !hasPreVersion(release)) {
                        echo "DEBUG: Adding '$release' to the list of versions because of major version."
                        conanVersions.add(release)
                    }
                    else if (version[0] == minVersion[0] && version[1] > minVersion[1]) {
                        echo "DEBUG: Adding '$release' to the list of versions because of minor version."
                        conanVersions.add(release)
                    }
                    else if (version[0] == minVersion[0] && version[1] == minVersion[1] &&  version[2] >= minVersion[2]) {
                        echo "DEBUG: Adding '$release' to the list of versions because of patch version."
                        conanVersions.add(release)
                    }
                }
                catch(e) {
                    echo "Failed to parse release '$release'"
                }
            }
            conanVersions = conanVersions.reverse()
            echo "DEBUG: Filtering Conan versions: ${conanVersions}"

            // Ensure at least one version of Conan 1.x and three from Conan 2.x
            def conan2Versions = conanVersions.findAll{element -> element[0] == '2'}
            conan2Versions = conan2Versions.size() > 3 ? conan2Versions.subList(0, 3) : conan2Versions
            def conan1Versions = conanVersions.findAll{element -> element[0] == '1'}
            conanVersions = conan2Versions + conan1Versions
        }
    }

    echo "INFO: Conan versions: ${conanVersions}"
    echo "INFO: Conan latest version: ${latestVersion}"

    List parameters = []

    // CCI uses same hardcoded values from the repository for the tools (only Conan version is changed)
    stage('Parse environment file') {
        checkout scm
        List<String> gccVersions = []
        List<String> clangVersions = []

        String content = readFile('modern/.env')
        content.split('\n').each({ it.trim() }).findAll({ it.size() && !it.startsWith('#') }).each {
            def (name, value) = it.split('=')

            // docker
            if (name == 'DISTRO') {
                parameters.add([$class: 'StringParameterValue', name: 'distro', value: value])
            }
            else if (name == 'DISTRO_VERSION') {
                parameters.add([$class: 'StringParameterValue', name: 'distro_version', value: value])
            }

            // tools installed
            else if (name == 'CMAKE_VERSION_FULL') {
                parameters.add([$class: 'StringParameterValue', name: 'cmake_version', value: value])
            }
            else if (name == 'PYTHON_VERSION') {
                parameters.add([$class: 'StringParameterValue', name: 'python_version', value: value])
            }
            else if (name == 'JENKINS_AGENT_VERSION') {
                parameters.add([$class: 'StringParameterValue', name: 'jenkins_agent_version', value: value])
            }
            else if (name == 'JENKINS_AGENT_NEW_VERSION') {
                parameters.add([$class: 'StringParameterValue', name: 'jenkins_agent_new_version', value: value])
            }
            else if (name == 'JAVA_JDK_VERSION') {
                parameters.add([$class: 'StringParameterValue', name: 'java_jdk_version', value: value, defaultValue: '8'])
            }
            else if (name == 'JAVA_JDK_NEW_VERSION') {
                parameters.add([$class: 'StringParameterValue', name: 'java_jdk_new_version', value: value, defaultValue: '11'])
            }

            // compiler versions
            else if (name =~ /GCC\d+_VERSION/) {
                gccVersions.add(value)
            }
            else if (name =~ /CLANG\d+_VERSION/) {
                clangVersions.add(value)
            }
            else if (name == 'LIBSTDCPP_VERSION') {
                parameters.add([$class: 'StringParameterValue', name: 'libstdcpp_version', value: value])
            }
            else if (name == 'LIBSTDCPP_PATCH_VERSION') {
                parameters.add([$class: 'StringParameterValue', name: 'libstdcpp_patch_version', value: value])
            }
            else if (name == 'LIBSTDCPP_MAJOR_VERSION') {
                parameters.add([$class: 'StringParameterValue', name: 'libstdcpp_major_version', value: value])
            }
        }
        parameters.add([$class: 'StringParameterValue', name: 'gcc_versions', value: "${gccVersions.join('\n')}"])
        parameters.add([$class: 'StringParameterValue', name: 'clang_versions', value: "${clangVersions.join('\n')}"])
    }

    // HEAD from 'master' branch
    String scm_commit = sh(script: 'git rev-parse HEAD', returnStdout: true).trim()
    parameters.add([$class: 'StringParameterValue', name: 'scm_repository', value: 'https://github.com/conan-io/conan-docker-tools'])
    parameters.add([$class: 'StringParameterValue', name: 'scm_commit', value: scm_commit])
    parameters.add([$class: 'StringParameterValue', name: 'scm_base_branch', value: 'master'])

    // [$class: 'StringParameterValue', name: 'suffix', value: 'cci'],
    parameters.add([$class: 'BooleanParameterValue', name: 'upload_main_images', value: true])
    parameters.add([$class: 'BooleanParameterValue', name: 'upload_jenkins_images', value: true])
    parameters.add([$class: 'BooleanParameterValue', name: 'dry_run', value: params.dry_run])

    for (strVersion in conanVersions) {
        boolean isLatest = (strVersion == latestVersion)
        stage("Build images for Conan '${strVersion}' (latest=${isLatest})") {
            // INFO: When building docker images, networking errors are frequent. We retry 3 times.
            retry(3) {
                build(job: 'ConanDockerTools/_generate', propagate: true, wait: true, parameters: parameters + [
                    [$class: 'StringParameterValue', name: 'conan_version', value: strVersion],
                    [$class: 'BooleanParameterValue', name: 'upload_latest', value: isLatest],
                ])
            }
        }
    }
}
